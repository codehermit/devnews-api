// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    Int
  posts     Post[]
  comments  Comment[]
  files     File[]   @relation("UserFiles")   // 用户上传的文件
  active    Boolean  @default(true)
  resetPasswordToken String? @unique
  resetPasswordExpires DateTime?

  @@map("users")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("roles")
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String   @db.Text
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  category  Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comments  Comment[]
  tags      TagsOnPosts[]
  files     File[]   @relation("PostFiles")   // 文章关联的文件

  @@map("posts")
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  posts     TagsOnPosts[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tags")
}

model TagsOnPosts {
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  tag       Tag      @relation(fields: [tagId], references: [id])
  tagId     Int
  createdAt DateTime @default(now())

  @@id([postId, tagId])
  @@map("tags_on_posts")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  posts       Post[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("categories")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  parentId  Int?
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model File {
  id           Int      @id @default(autoincrement())
  filename     String   // 存储的文件名
  originalName String   // 原始文件名
  mimeType     String   // 文件类型
  size         Int      // 文件大小（字节）
  path         String   // 文件存储路径
  user         User     @relation("UserFiles", fields: [userId], references: [id])
  userId       Int      // 上传者ID
  post         Post?    @relation("PostFiles", fields: [postId], references: [id])
  postId       Int?     // 关联的文章ID（可选）
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("files")
}
